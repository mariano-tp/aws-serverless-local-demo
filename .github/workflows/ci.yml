name: ci

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      localstack:
        image: localstack/localstack:3
        ports:
          - 4566:4566
        env:
          SERVICES: s3,sqs,dynamodb
          DEBUG: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install awscli-local

      - name: Wait for LocalStack health
        run: |
          echo "Esperando LocalStack..."
          for i in $(seq 1 60); do
            code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:4566/_localstack/health || true)
            if [ "$code" = "200" ]; then
              curl -s http://localhost:4566/_localstack/health
              echo; echo "OK"
              break
            fi
            sleep 2
          done

      - name: Bootstrap test infra (S3 + SQS + DDB + S3→SQS)
        env:
          AWS_DEFAULT_REGION: us-east-1
        shell: bash
        run: |
          set -euo pipefail

          # 1) S3 y SQS
          awslocal s3 mb s3://events-bucket || true
          QUEUE_URL=$(awslocal sqs create-queue --queue-name events-queue --query QueueUrl --output text)
          QUEUE_ARN=$(awslocal sqs get-queue-attributes --queue-url "$QUEUE_URL" --attribute-names QueueArn --query 'Attributes.QueueArn' --output text)

          # 2) Policy SQS (usar JSON compacto, sin multilínea)
          POLICY=$(python - <<'PY'
import json, os
print(json.dumps({
  "Version":"2012-10-17",
  "Statement":[{
    "Effect":"Allow",
    "Principal":{"Service":"s3.amazonaws.com"},
    "Action":"SQS:SendMessage",
    "Resource":os.environ["QUEUE_ARN"],
    "Condition":{"ArnLike":{"aws:SourceArn":"arn:aws:s3:::events-bucket"}}
  }]
}))
PY
)
          awslocal sqs set-queue-attributes --queue-url "$QUEUE_URL" --attributes Policy="$POLICY"

          # 3) Notificación S3 → SQS
          awslocal s3api put-bucket-notification-configuration \
            --bucket events-bucket \
            --notification-configuration "{\"QueueConfigurations\":[{\"QueueArn\":\"$QUEUE_ARN\",\"Events\":[\"s3:ObjectCreated:*\"]}]}"

          # 4) DynamoDB + wait
          awslocal dynamodb create-table \
            --table-name events \
            --attribute-definitions AttributeName=id,AttributeType=S \
            --key-schema AttributeName=id,KeyType=HASH \
            --billing-mode PAYPERREQUEST || true
          awslocal dynamodb wait table-exists --table-name events

      - name: Run tests
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: pytest -q
