name: ci

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      localstack:
        image: localstack/localstack:latest
        ports:
          - 4566:4566
        env:
          SERVICES: "s3,sqs,lambda,dynamodb,iam,cloudwatch,logs"
          LS_LOG: warn
        # Healthcheck robusto (sin jq)
        options: >-
          --health-cmd="bash -c 'curl -fsS http://localhost:4566/_localstack/health |
          python - <<PY
import json,sys
d=json.load(sys.stdin)
ok=all(v==\"running\" for v in d.get(\"services\",{}).values())
print(\"ready\" if ok else \"notready\")
PY
          | grep -q ready'"
          --health-interval=5s
          --health-retries=30
          --health-timeout=5s

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Wait for LocalStack
        run: |
          echo "Esperando LocalStack..."
          for i in {1..60}; do
            if curl -fsS http://localhost:4566/_localstack/health | \
               python - <<'PY'
import json,sys
d=json.load(sys.stdin)
ok=all(v=="running" for v in d.get("services",{}).values())
print("OK" if ok else "NO")
PY
            | grep -q OK; then
              echo "LocalStack listo"; break
            fi
            sleep 2
          done

      - name: Terraform init+apply (deploy Lambdas & recursos)
        env:
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_DEFAULT_REGION: us-east-1
        run: |
          terraform -chdir=terraform init -input=false
          terraform -chdir=terraform apply -auto-approve -input=false

      - name: Run tests
        env:
          PYTHONPATH: ${{ github.workspace }}
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_DEFAULT_REGION: us-east-1
        run: pytest -q

      - name: Terraform destroy (siempre)
        if: always()
        env:
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_DEFAULT_REGION: us-east-1
        run: terraform -chdir=terraform destroy -auto-approve || true
