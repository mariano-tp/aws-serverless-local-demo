name: ci

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # LocalStack (servicios libres que usamos)
      - name: Start LocalStack
        uses: localstack/setup-localstack@v1
        with:
          services: s3,sqs,sns,dynamodb
          image-tag: "latest"
          install-awslocal: "true"

      # Espera a que LocalStack estÃ© OK (el /health da 404, el bueno es /_localstack/health)
      - name: Wait for LocalStack
        run: |
          set -euxo pipefail
          for i in $(seq 1 120); do
            out="$(curl -sf http://localhost:4566/_localstack/health || true)"
            echo "$out"
            # Consideramos "ready" si hay al menos 3 servicios en running
            if echo "$out" | jq -e '.services | to_entries | map(select(.value=="running")) | length >= 3' >/dev/null; then
              echo "LocalStack ready"
              break
            fi
            sleep 1
          done

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      # Terraform init+apply
      - name: Terraform init
        run: terraform -chdir=terraform init -input=false

      - name: Terraform apply
        env:
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_DEFAULT_REGION: us-east-1
        run: terraform -chdir=terraform apply -auto-approve

      # Tests
      - name: Run tests
        env:
          PYTHONPATH: ${{ github.workspace }}
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_DEFAULT_REGION: us-east-1
        run: pytest -q

      # Terraform destroy (limpieza)
      - name: Terraform destroy
        if: always()
        env:
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_DEFAULT_REGION: us-east-1
        run: terraform -chdir=terraform destroy -auto-approve
