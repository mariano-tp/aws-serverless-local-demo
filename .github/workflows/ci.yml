name: ci

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'LICENSE'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 25

    services:
      localstack:
        image: localstack/localstack:latest
        ports:
          - 4566:4566
        env:
          SERVICES: s3,sqs,dynamodb
          AWS_DEFAULT_REGION: us-east-1
        # ⚠️ sin healthcheck aquí

    env:
      AWS_DEFAULT_REGION: us-east-1
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
      LOCALSTACK_URL: http://localhost:4566

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          pip install -r requirements-dev.txt || true
          pip install awscli-local==0.20
          python --version
          pip --version

      - name: Wait for LocalStack to be ready (host-side poll)
        run: |
          echo "Waiting for LocalStack on http://localhost:4566/health ..."
          for i in {1..120}; do
            if curl -fsS http://localhost:4566/health | grep -q "running"; then
              echo "LocalStack is ready."
              curl -fsS http://localhost:4566/health || true
              exit 0
            fi
            sleep 5
          done
          echo "LocalStack did not become ready in time."
          docker logs ${{ job.services.localstack.id }} || true
          exit 1

      # Opcional: crea recursos si tus tests los esperan ya existentes.
      - name: Bootstrap resources (optional)
        run: |
          set -e
          awslocal s3 mb s3://events-bucket 2>/dev/null || true
          awslocal sqs get-queue-url --queue-name events-queue >/dev/null 2>&1 \
            || awslocal sqs create-queue --queue-name events-queue
          if ! awslocal dynamodb describe-table --table-name events-table >/dev/null 2>&1; then
            awslocal dynamodb create-table \
              --table-name events-table \
              --attribute-definitions AttributeName=pk,AttributeType=S AttributeName=sk,AttributeType=S \
              --key-schema AttributeName=pk,KeyType=HASH AttributeName=sk,KeyType=RANGE \
              --billing-mode PAY_PER_REQUEST
          fi

      - name: Run tests
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: pytest -q

      - name: Dump LocalStack logs on failure
        if: failure()
        run: |
          docker ps
          docker logs ${{ job.services.localstack.id }} --since=30m || true
