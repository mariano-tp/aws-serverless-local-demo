name: ci

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    # LocalStack como servicio del job (sin Action externa)
    services:
      localstack:
        image: localstack/localstack:3
        ports:
          - 4566:4566
        env:
          SERVICES: s3,sqs,dynamodb,sns
          DEFAULT_REGION: us-east-1
          LS_LOG: info
        # healthcheck para esperar a que esté “running”
        options: >-
          --health-cmd="bash -ce 'curl -sf http://localhost:4566/_localstack/health | jq -e \".services | all(.[]; .status==\\\"running\\\")\"'"
          --health-interval=5s
          --health-retries=60
          --health-timeout=3s

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          pip install awscli-local jq

      - name: Esperar LocalStack (defensa extra)
        run: |
          for i in {1..60}; do
            OUT=$(curl -s http://localhost:4566/_localstack/health || true)
            echo "$OUT"
            echo "$OUT" | jq -e '.services | all(.[]; .status=="running")' && break
            sleep 2
          done

      # Si tenés un paso de “bootstrap” (crear bucket/queue y notificación S3→SQS), dejalo acá
      # Si lo haces con Terraform en otro workflow, podés omitir este paso.
      - name: Bootstrap test infra (S3 + SQS + notif S3→SQS)
        run: |
          set -euxo pipefail
          awslocal s3 mb s3://events-bucket || true
          QUEUE_URL=$(awslocal sqs create-queue --queue-name events-queue --query QueueUrl --output text)
          # Política para permitir que S3 mande a SQS
          awslocal sqs set-queue-attributes \
            --queue-url "$QUEUE_URL" \
            --attributes Policy="$(cat <<'JSON'
          {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Principal": { "Service": "s3.amazonaws.com" },
              "Action": "SQS:SendMessage",
              "Resource": "arn:aws:sqs:us-east-1:000000000000:events-queue",
              "Condition": { "ArnLike": { "aws:SourceArn": "arn:aws:s3:::events-bucket" } }
            }]
          }
          JSON
          )"
          # Notificación S3 → SQS en “ObjectCreated”
          awslocal s3api put-bucket-notification-configuration \
            --bucket events-bucket \
            --notification-configuration '{
              "QueueConfigurations": [{
                "QueueArn": "arn:aws:sqs:us-east-1:000000000000:events-queue",
                "Events": ["s3:ObjectCreated:*"]
              }]
            }'

      - name: Run tests
        env:
          AWS_REGION: us-east-1
          AWS_DEFAULT_REGION: us-east-1
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
        run: pytest -q
