name: ci

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      localstack:
        image: localstack/localstack:3
        ports:
          - 4566:4566
        env:
          SERVICES: s3,sqs,dynamodb
          LS_LOG: warn
        options: >-
          --health-cmd="curl -fsS http://localhost:4566/_localstack/health || curl -fsS http://localhost:4566/health || exit 1"
          --health-interval=5s --health-timeout=2s --health-retries=60

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          pip install awscli-local==0.20

      - name: Wait for LocalStack to be ready (host-side poll)
        env:
          LOCALSTACK_URL: http://localhost:4566
        run: |
          echo "Waiting for LocalStack on $LOCALSTACK_URL ..."
          for i in {1..120}; do
            if curl -fsS "$LOCALSTACK_URL/_localstack/health" | grep -qi "running"; then
              echo "LocalStack is ready (/_localstack/health)."
              break
            fi
            if curl -fsS "$LOCALSTACK_URL/health" | grep -qi "running"; then
              echo "LocalStack is ready (/health)."
              break
            fi
            if awslocal s3 ls >/dev/null 2>&1; then
              echo "LocalStack is ready (awslocal probe)."
              break
            fi
            sleep 3
          done

      - name: Bootstrap test infra in LocalStack (S3+SQS+DDB + S3→SQS notification)
        env:
          AWS_DEFAULT_REGION: us-east-1
        run: |
          set -euxo pipefail
          # S3
          awslocal s3 mb s3://events-bucket || true

          # SQS
          QUEUE_URL=$(awslocal sqs create-queue --queue-name events-queue --query QueueUrl --output text || awslocal sqs get-queue-url --queue-name events-queue --query QueueUrl --output text)
          QUEUE_ARN=$(awslocal sqs get-queue-attributes --queue-url "$QUEUE_URL" --attribute-names QueueArn --query 'Attributes.QueueArn' --output text)

          # Policy para permitir que S3 publique en la queue
          POLICY_JSON=$(cat <<EOF
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": { "Service": "s3.amazonaws.com" },
                "Action": "SQS:SendMessage",
                "Resource": "$QUEUE_ARN",
                "Condition": {
                  "ArnLike": { "aws:SourceArn": "arn:aws:s3:::events-bucket" }
                }
              }
            ]
          }
          EOF
          )
          # OJO: nada de comillas simples aquí
          awslocal sqs set-queue-attributes --queue-url "$QUEUE_URL" --attributes Policy="$POLICY_JSON"

          # Notificación S3 -> SQS ante ObjectCreated
          awslocal s3api put-bucket-notification-configuration \
            --bucket events-bucket \
            --notification-configuration "{\"QueueConfigurations\":[{\"QueueArn\":\"$QUEUE_ARN\",\"Events\":[\"s3:ObjectCreated:*\"]}]}"

          # DynamoDB
          awslocal dynamodb create-table \
            --table-name events \
            --attribute-definitions AttributeName=pk,AttributeType=S AttributeName=sk,AttributeType=S \
            --key-schema AttributeName=pk,KeyType=HASH AttributeName=sk,KeyType=RANGE \
            --billing-mode PAY_PER_REQUEST >/dev/null || true

      - name: Run tests
        env:
          AWS_DEFAULT_REGION: us-east-1
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          LOCALSTACK_ENDPOINT: http://localhost:4566
          PYTHONPATH: ${{ github.workspace }}
        run: pytest -q

      - name: Dump LocalStack logs on failure
        if: failure()
        run: docker logs ${{ job.services.localstack.id }} || true
