name: ci

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    # LocalStack como service container
    services:
      localstack:
        image: localstack/localstack:3
        ports:
          - 4566:4566
        env:
          # Los servicios que usamos en las pruebas
          SERVICES: s3,sqs,dynamodb
          LS_LOG: warn
          # (opcional) si tuvieras licencia/clave de LocalStack:
          # LOCALSTACK_API_KEY: ${{ secrets.LOCALSTACK_API_KEY }}
        # healthcheck básico del contenedor (no confiamos sólo en esto; abajo
        # hacemos un wait más robusto desde el host)
        options: >-
          --health-cmd="curl -fsS http://localhost:4566/_localstack/health || curl -fsS http://localhost:4566/health || exit 1"
          --health-interval=5s --health-timeout=2s --health-retries=60

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          pip install awscli-local==0.20

      # ⬇️ Espera robusta: prueba ambos endpoints /_localstack/health y /health,
      # y como fallback hace una operación con awslocal.
      - name: Wait for LocalStack to be ready (host-side poll)
        env:
          LOCALSTACK_URL: http://localhost:4566
        run: |
          echo "Waiting for LocalStack on $LOCALSTACK_URL ..."
          for i in {1..120}; do
            # 1) Endpoint nuevo
            if curl -fsS "$LOCALSTACK_URL/_localstack/health" | grep -qi "running"; then
              echo "LocalStack is ready (/_localstack/health)."
              curl -fsS "$LOCALSTACK_URL/_localstack/health" || true
              break
            fi
            # 2) Endpoint clásico
            if curl -fsS "$LOCALSTACK_URL/health" | grep -qi "running"; then
              echo "LocalStack is ready (/health)."
              curl -fsS "$LOCALSTACK_URL/health" || true
              break
            fi
            # 3) Fallback: si ya responde el edge, esto debería funcionar
            if awslocal s3 ls >/dev/null 2>&1; then
              echo "LocalStack is ready (awslocal probe)."
              break
            fi
            sleep 3
          done

      # Infra mínima que las pruebas esperan (bucket, queue, tabla)
      - name: Bootstrap test infra in LocalStack
        run: |
          set -euxo pipefail
          export AWS_DEFAULT_REGION=us-east-1
          # S3
          awslocal s3 mb s3://events-bucket || true
          # SQS
          awslocal sqs create-queue --queue-name events-queue >/dev/null
          # DynamoDB
          awslocal dynamodb create-table \
            --table-name events-table \
            --attribute-definitions AttributeName=pk,AttributeType=S AttributeName=sk,AttributeType=S \
            --key-schema AttributeName=pk,KeyType=HASH AttributeName=sk,KeyType=RANGE \
            --billing-mode PAY_PER_REQUEST >/dev/null || true

      - name: Run tests
        env:
          AWS_DEFAULT_REGION: us-east-1
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          LOCALSTACK_ENDPOINT: http://localhost:4566
          PYTHONPATH: ${{ github.workspace }}
        run: pytest -q

      - name: Dump LocalStack logs on failure
        if: failure()
        run: docker logs ${{ job.services.localstack.id }} || true
