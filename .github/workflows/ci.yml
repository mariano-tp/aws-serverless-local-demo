name: ci

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      localstack:
        # ðŸ”’ Pinned a versiÃ³n community con Lambda v1
        image: localstack/localstack:1.4.0
        ports:
          - 4566:4566
        env:
          SERVICES: "s3,sqs,lambda,dynamodb,iam,cloudwatch,logs,sns"
          # v1 executor local: NO usa Docker
          LAMBDA_EXECUTOR: local
          LS_LOG: warn

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Wait for LocalStack (health or timeout)
        shell: bash
        run: |
          echo "Esperando LocalStack en http://localhost:4566 ..."
          ok=""
          for i in {1..60}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:4566/_localstack/health || true)
            if [ "$code" = "200" ]; then
              echo "LocalStack listo (HTTP 200)"; ok="yes"; break
            fi
            sleep 2
          done
          if [ -z "$ok" ]; then
            echo "LocalStack no respondiÃ³ a tiempo. Logs del contenedor:"
            docker ps -a || true
            cid="$(docker ps -q --filter 'ancestor=localstack/localstack:1.4.0' | head -n1)"
            if [ -n "$cid" ]; then docker logs "$cid" || true; fi
            exit 1
          fi

      - name: Terraform init + apply (deploy infra)
        env:
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_DEFAULT_REGION: us-east-1
        run: |
          terraform -chdir=terraform init -input=false
          terraform -chdir=terraform apply -auto-approve -input=false

      - name: Run tests
        env:
          PYTHONPATH: ${{ github.workspace }}
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_DEFAULT_REGION: us-east-1
        run: pytest -q

      - name: Terraform destroy (always)
        if: always()
        env:
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_DEFAULT_REGION: us-east-1
        run: |
          terraform -chdir=terraform init -input=false || true
          terraform -chdir=terraform destroy -auto-approve || true
